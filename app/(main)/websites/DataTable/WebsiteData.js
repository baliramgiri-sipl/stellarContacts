"use client"
import { AgGridReact } from 'ag-grid-react'
import React, { useCallback, useEffect, useMemo, useRef } from 'react'
import "ag-grid-enterprise"
import { defualtAgGridProps, defualtCols } from '@/lib/utils'
import ActionBtn from '@/components/Actions/ActionBtn'
import { useMutation } from '@tanstack/react-query'
import { deleteUser, deleteWebsite, websiteList } from '../services'
import Toolbar from '@/components/Toobar/Toolbar'
import Form from '../Form/Form'
import { useDispatch, useSelector } from 'react-redux'
import { statusHandler } from '@/lib/helpers'
import { useSession } from 'next-auth/react'
import { UPDATE_WEBSITE_DATA_INFO, UPDATE_WEBSITE_MODAL } from '@/redux/websiteReducer/websiteReducer'
import ActiveHandler from './ActiveHandler'
export const metadata = {
    title: 'Users',
    description: 'Generated by create next app',
}
const WebsiteData = () => {
    const { websiteModal, websiteDataInfo } = useSelector(state => state?.websiteReducer)
    const session = useSession()
    const isSuperAdmin = session?.data?.user?.UserType?.name === 'super admin'

    const dispatch = useDispatch()
    //table api
    const gridRef = useRef(null);

    const { data, isLoading, mutate } = useMutation(websiteList, {
        onSuccess() {
            //make it null to prevent consistent results
            dispatch({ type: UPDATE_WEBSITE_DATA_INFO, payload: null })
        }
    })
    //delete users
    const { mutateAsync, isLoading: isLoadingDeleteUser } = useMutation(deleteWebsite, { ...statusHandler() })

    const actionHandler = useCallback((record) => {
        //open user modal
        dispatch({ type: UPDATE_WEBSITE_MODAL, payload: true })
        dispatch({ type: UPDATE_WEBSITE_DATA_INFO, payload: record })
    }, [])

    //delete 
    const deleteHandler = useCallback(async (id) => {
        await mutateAsync({ websiteId: id }).then(() => {
            //call the users list
            mutate()
        })

    }, [])

    const columnDefs = useMemo(
        () => [
            {
                field: "name",
                headerName: "Name",
                flex: 1.5,
            },
            {
                field: "is_active",
                headerName: "Active",
                flex: 1.5,
                cellRenderer({ value, data: { id } }) {
                    return <ActiveHandler refetch={mutate} defaultChecked={value} id={id} />
                }
            },
            {
                field: "createdAt",
                headerName: "Created At",
                flex: 1
            },
            {
                field: "actions",
                headerName: "Actions",
                cellRenderer({ data }) {
                    return <ActionBtn isDelete={isSuperAdmin} onClick={(type) => type === "edit" ? actionHandler(data) : deleteHandler(data?.id)} />
                },
            },
        ],
        [actionHandler, deleteHandler, isSuperAdmin]
    );


    const defaultColDef = useMemo(() => {
        return defualtCols()
    }, []);


    useEffect(() => {
        try {
            if (gridRef && (isLoading || isLoadingDeleteUser)) {
                gridRef?.current?.api?.showLoadingOverlay();
            } else {
                gridRef?.current?.api?.hideOverlay();
            }
        } catch (error) {
            console.log(error)
        }
    }, [isLoading, isLoadingDeleteUser])

    const toolbarHandler = (value) => {
        dispatch({ type: UPDATE_WEBSITE_MODAL, payload: value })
        if (!value) {
            dispatch({ type: UPDATE_WEBSITE_DATA_INFO, payload: null })
        }
    }

    useEffect(() => {
        mutate()
    }, [])


    return (
        <div>
            <Toolbar open={websiteModal} onOpen={toolbarHandler} onClose={toolbarHandler} modalWidth={30} modalTitle={`${websiteDataInfo ? "Edit" : "Add"} Website`} modalChildren={<Form refetch={mutate} />} />
            <div
                className="ag-theme-alpine w-full shadow-sm" // applying the grid theme
                style={{ height: data?.length > 10 ? 400 : 200, width: "100%" }}  // the grid will fill the size of the parent container
            >
                <AgGridReact
                    {...defualtAgGridProps({
                        data: data || [],
                        defaultColDef,
                    })}
                    ref={gridRef}
                    columnDefs={columnDefs}

                />
            </div>
        </div>
    )
}

export default WebsiteData